#! /usr/bin/env perl

=head1 NAME

sticker - add Xtra data (meta-data) to files or populate a database with file meta-data

=head1 SYNOPSIS

    sticker --help | --manpage | --version

    sticker [--verbose] [--derive] --add I<string>=I<string> file [file ...]
    sticker [--verbose] --delete I<string> file [file ...]
    sticker [--verbose] --extract file [file ...]
    sticker [--verbose] --from_file I<otherfile> file [file ...]

    sticker --missing
    sticker --overlooked file ...

    sticker --query query-string ...

    sticker --removed file ...
    sticker --update file ...

=head1 DESCRIPTION

This reads meta-data from files, and populates a database with that information.
It also deletes from and queries the database.

=head1 OPTIONS

=over

=item --help

Display short help and exit.

=item --manpage

Display full documentation and exit.

=item --verbose

Make the output verbose.

=item --add I<string>=I<string>

Set the given field in the given file.

=item --delete I<string>

Delete the given field from the given file.

=item --derive

Derive the needed value of the given field from other information in the given file.

=item --extract

Extract metadata in other formats (e.g. EXIF data) and save as extended attributes.

=item --from_file I<filename>

Extract metadata in other formats (e.g. EXIF data) from one file and save as extended attributes in another file.

=item --query I<string>

Return the list of files matching the given tag(s).

=back

=cut
use common::sense;
use Getopt::Long;
use Getopt::ArgvFile qw(argvFile);
use Pod::Usage;
use File::Basename;
use File::Spec;
use YAML::Any;
use File::Sticker;

#========================================================
# Subroutines

sub process_args () {
    my $opts = {
    };

    # check the rc file
    my $nameBuilder=sub
    {
        my $bn = basename($_[0], '');
        [".${bn}rc", ".${bn}/config", ".config/${bn}/config"];
    };
    argvFile(
        startupFilename=>$nameBuilder,
        home=>1,
        current=>1);

    my $op = new Getopt::Long::Parser;
    $op->configure(qw(auto_version auto_help));
    $op->getoptions($opts,
	       'verbose+',
	       'manpage',
	       'dbname=s',
	       'topdir=s',
               'primary_table|table=s',
               'tagfield=s',
	       'wanted_fields=s%',
	       'field_order=s@',
	       'taggable_fields=s@',
               'query',
               'removed|rm',
               'missing',
               'overlooked',
               'update',
               'list',
               'derive!',
               'extract!',
               'from_file=s',
	       'add=s%',
	       'delete=s@',
	      ) or pod2usage(2);

    if ($opts->{manpage})
    {
	pod2usage({ -message => "$0 ",
		    -exitval => 0,
		    -verbose => 2,
	    });
    }

    if ($opts->{verbose} > 1)
    {
        print STDERR "========\n", Dump($opts), "========\n";
    }
    return $opts;
} # process_args

sub print_meta {
    my $opts = shift;
    my %args = @_;

    my $sticker = $args{sticker};
    my $filename = $args{filename};

    say STDERR "== $filename ==";
    my $meta = $sticker->read_meta($filename);
    print STDERR Dump($meta);
} # print_meta

sub meta_from_file {
    my $opts = shift;
    my %args = @_;

    my $sticker = $args{sticker};
    my $filename = $args{filename};
    my $from_file = $args{from_file};

    my $meta = $sticker->read_meta($from_file);

    $sticker->replace_all_meta(filename=>$filename,meta=>$meta);
} # meta_from_file

sub do_stuff {
    my $opts = shift;
    my $sticker = shift;

    if ($opts->{query})
    {
        my $query_string = join(' ', @ARGV);
        my $files = $sticker->query_by_tags($query_string);
        say join("\n", @{$files});
    }
    elsif ($opts->{missing})
    {
        my $files = $sticker->missing_files();
        say join("\n", @{$files});
    }
    elsif ($opts->{overlooked})
    {
        my $files = $sticker->overlooked_files(@ARGV);
        say join("\n", @{$files});
    }
    elsif ($opts->{update})
    {
        $sticker->update_db(@ARGV);
    }
    else
    {
        #
        # This invocation is a per-file operation.
        #
        foreach my $file (@ARGV)
        {
            print STDERR "$file\n" if $opts->{verbose};

            if ($opts->{removed})
            {
                $sticker->delete_file_from_db($file);
            }
            elsif ($opts->{add} or $opts->{delete})
            {
                if ($opts->{add})
                {
                    foreach my $fn (keys %{$opts->{add}})
                    {
                        $sticker->add_field_to_file(
                            filename => $file,
                            field => $fn,
                            value => $opts->{add}->{$fn});
                    }
                }
                if ($opts->{delete})
                {
                    foreach my $fn (@{$opts->{delete}})
                    {
                        $sticker->delete_field_from_file(
                            filename => $file,
                            field => $fn);
                    }
                }
            }
            elsif ($opts->{extract})
            {
                meta_from_file($opts,sticker=>$sticker,filename=>$file,from_file=>$file);
                if ($opts->{verbose})
                {
                    print_meta($opts,sticker=>$sticker,filename=>$file);
                }
            }
            elsif ($opts->{from_file})
            {
                meta_from_file($opts,sticker=>$sticker,filename=>$file,from_file=>$opts->{from_file});
                if ($opts->{verbose})
                {
                    print_meta($opts,sticker=>$sticker,filename=>$file);
                }
            }
            elsif ($opts->{list})
            {
                print_meta($opts,sticker=>$sticker,filename=>$file);
            }
            else
            {
                my $meta = $sticker->query_one_file($file);
                print $file, ': ', Dump($meta), "\n";
            }
        }
    }

} # do_stuff

#========================================================
# Main

MAIN: {
    my $opts = process_args();
    my $sticker = File::Sticker->new(
        dbname=>$opts->{dbname},
        topdir=>$opts->{topdir},
        wanted_fields=>$opts->{wanted_fields},
        field_order=>$opts->{field_order},
        taggable_fields=>$opts->{taggable_fields},
        primary_table=>$opts->{primary_table},
        derive=>$opts->{derive},
        tagfield=>$opts->{tagfield},
        verbose=>$opts->{verbose},
    );

    do_stuff($opts,$sticker);
}
